pipeline {
    agent any

    environment {
        SONAR_URL = "http://98.83.209.213:9000"
        DOCKER_REGISTRY = "docker.io"
        DOCKER_USER = "mohan0900"
        GIT_REPO_NAME = "Jenkins-Zero-To-Hero-Mohan"
        GIT_USER_NAME = "mohan0900"
    }

    stages {
        stage('Prepare Workspace') {
            steps {
                echo "Cleaning workspace and fixing permissions..."
                sh 'rm -rf java-maven-sonar-argocd-helm-k8s/spring-boot-app/target || true'
                sh 'chown -R $(whoami):$(whoami) . || true'
            }
        }

        stage('Checkout') {
            steps {
                git branch: 'main',
                    url: 'https://github.com/mohan0900/Jenkins-Zero-To-Hero-Mohan.git'
            }
        }

        stage('Build and Test') {
            agent {
                docker {
                    image 'maven:3.9.9-eclipse-temurin-17'
                    args '-v /var/run/docker.sock:/var/run/docker.sock' // mount Docker socket
                }
            }
            steps {
                sh '''
                    cd java-maven-sonar-argocd-helm-k8s/spring-boot-app
                    mvn clean package
                '''
            }
        }

        stage('Static Code Analysis') {
            steps {
                withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
                    sh '''
                        cd java-maven-sonar-argocd-helm-k8s/spring-boot-app
                        mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}
                    '''
                }
            }
        }

        stage('Build and Push Docker Image') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'docker-cred', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    sh '''
                        cd java-maven-sonar-argocd-helm-k8s/spring-boot-app
                        DOCKER_IMAGE=${DOCKER_USER}/spring-boot-app:${BUILD_NUMBER}
                        docker build -t $DOCKER_IMAGE .
                        echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
                        docker push $DOCKER_IMAGE
                    '''
                }
            }
        }

        stage('Update Deployment File') {
            steps {
                withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
                    sh '''
                        git config user.email "mohan0900@gmail.com"
                        git config user.name "Mohan Raj"
                        BUILD_NUMBER=${BUILD_NUMBER}
                        sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
                        git add java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
                        git commit -m "Update deployment image to version ${BUILD_NUMBER}"
                        git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
                    '''
                }
            }
        }
    }

    post {
        always {
            echo "Pipeline finished. Cleaning up Docker containers..."
            sh 'docker ps -a -q | xargs -r docker rm -f || true'
        }
        success {
            echo "Pipeline completed successfully!"
        }
        failure {
            echo "Pipeline failed. Check logs for errors."
        }
    }
}
